// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ebHHF3yM7B6GSg8q7r2FBw
// Component: sRrbFrQFCQtt

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  usePlasmicDataConfig,
  executePlasmicDataOp,
  usePlasmicDataOp
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import PageLayout from "../../PageLayout"; // plasmic-import: cPfYxPfKbAAF/component
import { MyComponent } from "../../MyComponent"; // plasmic-import: MZPxOIvRSxMj/codeComponent
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: 2aDuB9WVQvRt/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_plasmic_sample.module.css"; // plasmic-import: ebHHF3yM7B6GSg8q7r2FBw/projectcss
import sty from "./PlasmicHelloPage.module.css"; // plasmic-import: sRrbFrQFCQtt/css

createPlasmicElementProxy;

export type PlasmicHelloPage__VariantMembers = {};
export type PlasmicHelloPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHelloPage__VariantsArgs;
export const PlasmicHelloPage__VariantProps = new Array<VariantPropType>();

export type PlasmicHelloPage__ArgsType = {};
type ArgPropType = keyof PlasmicHelloPage__ArgsType;
export const PlasmicHelloPage__ArgProps = new Array<ArgPropType>();

export type PlasmicHelloPage__OverridesType = {
  root?: p.Flex<"div">;
  pageLayout?: p.Flex<typeof PageLayout>;
  section?: p.Flex<"section">;
  h1?: p.Flex<"h1">;
  text?: p.Flex<"div">;
  myComponent?: p.Flex<typeof MyComponent>;
  textFromApi?: p.Flex<"div">;
};

export interface DefaultHelloPageProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHelloPage__RenderFunc(props: {
  variants: PlasmicHelloPage__VariantsArgs;
  args: PlasmicHelloPage__ArgsType;
  overrides: PlasmicHelloPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "" as const
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    helloApi: usePlasmicDataOp(
      (() => {
        try {
          return {
            sourceId: "j8LFsD1YziGkSVs6vWfk93",
            opId: "b8a71e71-5da1-463a-b24a-f30fb52ffa1f",
            userArgs: {},
            cacheKey: "plasmic.$.GPYaB4cYzUty.$.",
            invalidatedKeys: null,
            roleId: null
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          } else {
            throw e;
          }
        }
      })()
    )
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
  }

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHelloPage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHelloPage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHelloPage.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
          >
            <ph.DataCtxReader>
              {$ctx => (
                <React.Fragment>
                  <section
                    data-plasmic-name={"section"}
                    data-plasmic-override={overrides.section}
                    className={classNames(projectcss.all, sty.section)}
                  >
                    <h1
                      data-plasmic-name={"h1"}
                      data-plasmic-override={overrides.h1}
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1
                      )}
                    >
                      {"Hello"}
                    </h1>
                    <div
                      data-plasmic-name={"text"}
                      data-plasmic-override={overrides.text}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text
                      )}
                    >
                      {
                        "Press the big blue + button to insert components like Tables, Text, Buttons, and Forms.\n\nJoin our Slack Community (icon in bottom left) for help!"
                      }
                    </div>
                  </section>
                  <MyComponent
                    data-plasmic-name={"myComponent"}
                    data-plasmic-override={overrides.myComponent}
                    className={classNames("__wab_instance", sty.myComponent)}
                  />

                  <div
                    data-plasmic-name={"textFromApi"}
                    data-plasmic-override={overrides.textFromApi}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.textFromApi
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $queries.helloApi.data.response.name;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Loading..";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </React.Fragment>
              )}
            </ph.DataCtxReader>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageLayout",
    "section",
    "h1",
    "text",
    "myComponent",
    "textFromApi"
  ],
  pageLayout: [
    "pageLayout",
    "section",
    "h1",
    "text",
    "myComponent",
    "textFromApi"
  ],
  section: ["section", "h1", "text"],
  h1: ["h1"],
  text: ["text"],
  myComponent: ["myComponent"],
  textFromApi: ["textFromApi"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageLayout: typeof PageLayout;
  section: "section";
  h1: "h1";
  text: "div";
  myComponent: typeof MyComponent;
  textFromApi: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHelloPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHelloPage__VariantsArgs;
    args?: PlasmicHelloPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHelloPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHelloPage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHelloPage__ArgProps,
          internalVariantPropNames: PlasmicHelloPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHelloPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHelloPage";
  } else {
    func.displayName = `PlasmicHelloPage.${nodeName}`;
  }
  return func;
}

export const PlasmicHelloPage = Object.assign(
  // Top-level PlasmicHelloPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    section: makeNodeComponent("section"),
    h1: makeNodeComponent("h1"),
    text: makeNodeComponent("text"),
    myComponent: makeNodeComponent("myComponent"),
    textFromApi: makeNodeComponent("textFromApi"),

    // Metadata about props expected for PlasmicHelloPage
    internalVariantProps: PlasmicHelloPage__VariantProps,
    internalArgProps: PlasmicHelloPage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Hello",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHelloPage;
/* prettier-ignore-end */
